Index: gdm-2.30.5/daemon/gdm-display.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-display.c	2010-11-06 08:30:07.848208636 +0100
+++ gdm-2.30.5/daemon/gdm-display.c	2010-11-06 08:32:50.492212618 +0100
@@ -70,6 +70,7 @@ struct GdmDisplayPrivate
         gboolean              is_local;
         gboolean              is_nested;
         guint                 finish_idle_id;
+        gboolean              needs_respawn;
 
         GdmSlaveProxy        *slave_proxy;
         DBusGConnection      *connection;
@@ -340,6 +341,20 @@ gdm_display_set_slave_bus_name (GdmDispl
         return ret;
 }
 
+gboolean
+gdm_display_set_needs_respawn (GdmDisplay *display,
+                               gboolean    respawn,
+                               GError    **error)
+{
+        g_return_val_if_fail (GDM_IS_DISPLAY (display), FALSE);
+
+        g_debug ("GdmDisplay: %s respawn on display %s", respawn?"Enabling":"Disabling", display->priv->x11_display_name);
+
+        display->priv->needs_respawn = respawn;
+
+        return TRUE;
+}
+
 static void
 gdm_display_real_get_timed_login_details (GdmDisplay *display,
                                           gboolean   *enabledp,
@@ -766,6 +781,34 @@ gdm_display_unmanage (GdmDisplay *displa
 }
 
 gboolean
+gdm_display_respawn_or_finish (GdmDisplay *display)
+{
+        g_return_val_if_fail (GDM_IS_DISPLAY (display), FALSE);
+
+        if (display->priv->needs_respawn) {
+                int status;
+
+                g_debug ("GdmDisplay: respawning display %s", display->priv->x11_display_name);
+                display->priv->needs_respawn = FALSE;
+
+                gdm_display_unmanage (display);
+
+                status = gdm_display_get_status (display);
+                if (status != GDM_DISPLAY_FAILED) {
+                        gdm_display_manage (display);
+                }
+        } else {
+                /* Since this is called from the children's finish,
+                   don't call it again, only call real_finish. */
+                gdm_display_real_finish (display);
+
+                gdm_display_unmanage (display);
+        }
+
+        return TRUE;
+}
+
+gboolean
 gdm_display_get_id (GdmDisplay         *display,
                     char              **id,
                     GError            **error)
Index: gdm-2.30.5/daemon/gdm-display.h
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-display.h	2010-11-06 08:30:07.848208636 +0100
+++ gdm-2.30.5/daemon/gdm-display.h	2010-11-06 08:30:08.312210692 +0100
@@ -96,6 +96,7 @@ gboolean            gdm_display_prepare
 gboolean            gdm_display_manage                         (GdmDisplay *display);
 gboolean            gdm_display_finish                         (GdmDisplay *display);
 gboolean            gdm_display_unmanage                       (GdmDisplay *display);
+gboolean            gdm_display_respawn_or_finish              (GdmDisplay *display);
 
 
 /* exported to bus */
@@ -150,6 +151,9 @@ gboolean            gdm_display_get_user
 gboolean            gdm_display_set_slave_bus_name             (GdmDisplay *display,
                                                                 const char *name,
                                                                 GError    **error);
+gboolean            gdm_display_set_needs_respawn              (GdmDisplay *display,
+                                                                gboolean    respawn,
+                                                                GError    **error);
 
 
 G_END_DECLS
Index: gdm-2.30.5/daemon/gdm-display.xml
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-display.xml	2010-11-06 08:30:07.852209703 +0100
+++ gdm-2.30.5/daemon/gdm-display.xml	2010-11-06 08:30:08.312210692 +0100
@@ -45,6 +45,9 @@
     <method name="SetSlaveBusName">
       <arg name="name" direction="in" type="s"/>
     </method>
+    <method name="SetNeedsRespawn">
+      <arg name="respawn" direction="in" type="b"/>
+    </method>
     <method name="GetTimedLoginDetails">
       <arg name="enabled" direction="out" type="b"/>
       <arg name="username" direction="out" type="s"/>
Index: gdm-2.30.5/daemon/gdm-simple-slave.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-simple-slave.c	2010-11-06 08:30:08.268209705 +0100
+++ gdm-2.30.5/daemon/gdm-simple-slave.c	2010-11-06 08:30:08.312210692 +0100
@@ -108,6 +108,9 @@ on_session_started (GdmSession       *se
 
         g_debug ("GdmSimpleSlave: session started %d", pid);
 
+        /* Respawn the display when the user session has finished */
+        gdm_slave_set_needs_respawn (GDM_SLAVE (slave), TRUE);
+
         /* Run the PreSession script. gdmslave suspends until script has terminated */
         username = gdm_session_direct_get_username (slave->priv->session);
         if (username != NULL) {
Index: gdm-2.30.5/daemon/gdm-slave.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-slave.c	2010-11-06 08:30:07.852209703 +0100
+++ gdm-2.30.5/daemon/gdm-slave.c	2010-11-06 08:30:08.316207360 +0100
@@ -559,6 +559,37 @@ gdm_slave_set_slave_bus_name (GdmSlave *
         return res;
 }
 
+gboolean
+gdm_slave_set_needs_respawn (GdmSlave *slave,
+                             gboolean  respawn)
+{
+        gboolean    res;
+        GError     *error;
+
+        /* Never, ever respawn a nested display */
+        if (slave->priv->display_is_nested)
+                respawn = FALSE;
+
+        error = NULL;
+        res = dbus_g_proxy_call (slave->priv->display_proxy,
+                                 "SetNeedsRespawn",
+                                 &error,
+                                 G_TYPE_BOOLEAN, respawn,
+                                 G_TYPE_INVALID,
+                                 G_TYPE_INVALID);
+
+        if (! res) {
+                if (error != NULL) {
+                        g_warning ("Failed to set respawn on parent display: %s", error->message);
+                        g_error_free (error);
+                } else {
+                        g_warning ("Failed to set respawn on parent display");
+                }
+        }
+
+        return res;
+}
+
 static gboolean
 gdm_slave_real_start (GdmSlave *slave)
 {
Index: gdm-2.30.5/daemon/gdm-slave.h
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-slave.h	2010-08-11 16:19:44.000000000 +0200
+++ gdm-2.30.5/daemon/gdm-slave.h	2010-11-06 08:30:08.316207360 +0100
@@ -72,6 +72,9 @@ gboolean            gdm_slave_add_user_a
 gboolean            gdm_slave_switch_to_user_session (GdmSlave   *slave,
                                                       const char *username);
 
+gboolean            gdm_slave_set_needs_respawn      (GdmSlave *slave,
+                                                      gboolean  respawn);
+
 gboolean            gdm_slave_connect_to_x11_display (GdmSlave   *slave);
 void                gdm_slave_set_busy_cursor        (GdmSlave   *slave);
 gboolean            gdm_slave_run_script             (GdmSlave   *slave,
Index: gdm-2.30.5/daemon/gdm-transient-display.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-transient-display.c	2010-08-11 16:19:44.000000000 +0200
+++ gdm-2.30.5/daemon/gdm-transient-display.c	2010-11-06 08:30:08.316207360 +0100
@@ -100,12 +100,9 @@ gdm_transient_display_finish (GdmDisplay
 {
         g_return_val_if_fail (GDM_IS_DISPLAY (display), FALSE);
 
-        GDM_DISPLAY_CLASS (gdm_transient_display_parent_class)->finish (display);
+        /* Only respawn if needed. */
 
-        /* we don't restart/remanage transient displays */
-        gdm_display_unmanage (display);
-
-        return TRUE;
+        return gdm_display_respawn_or_finish (display);
 }
 
 static gboolean
Index: gdm-2.30.5/daemon/gdm-static-display.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-static-display.c	2010-08-11 16:19:44.000000000 +0200
+++ gdm-2.30.5/daemon/gdm-static-display.c	2010-11-06 08:30:08.316207360 +0100
@@ -98,22 +98,13 @@ gdm_static_display_manage (GdmDisplay *d
 static gboolean
 gdm_static_display_finish (GdmDisplay *display)
 {
-        int status;
-
         g_return_val_if_fail (GDM_IS_DISPLAY (display), FALSE);
 
-        /* Don't call parent's finish since we don't ever
-           want to be put in the FINISHED state */
-
-        /* restart static displays */
-        gdm_display_unmanage (display);
-
-        status = gdm_display_get_status (display);
-        if (status != GDM_DISPLAY_FAILED) {
-                gdm_display_manage (display);
-        }
+        /* Only respawn if needed, even for static displays.
+           Avoids the case where :0 keeps respawning while
+           used for switching to an existing session in e.g. :1. */
 
-        return TRUE;
+        return gdm_display_respawn_or_finish (display);
 }
 
 static gboolean
Index: gdm-2.30.5/daemon/gdm-local-display-factory.c
===================================================================
--- gdm-2.30.5.orig/daemon/gdm-local-display-factory.c	2010-11-06 08:30:07.848208636 +0100
+++ gdm-2.30.5/daemon/gdm-local-display-factory.c	2010-11-06 08:30:08.316207360 +0100
@@ -431,7 +431,6 @@ on_static_display_status_changed (GdmDis
                 gdm_display_store_remove (store, display);
                 /* reset num failures */
                 factory->priv->num_failures = 0;
-                create_display (factory);
                 break;
         case GDM_DISPLAY_FAILED:
                 /* leave the display number in factory->priv->displays
